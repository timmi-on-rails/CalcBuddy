Bridge.assembly("Parser", function ($asm, globals) {
    "use strict";


    var $m = Bridge.setMetadata,
        $n = ["System.Collections.Generic","Parser","System","Tokenizer","System.Text"];
    $m("Parser.ParserSpecification", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Infix","is":true,"t":4,"rt":$n[0].Dictionary$2(Tokenizer.TokenType,Parser.IInfixParselet),"sn":"Infix","ro":true},{"a":2,"n":"Prefix","is":true,"t":4,"rt":$n[0].Dictionary$2(Tokenizer.TokenType,Parser.IPrefixParselet),"sn":"Prefix","ro":true}]}; }, $n);
    $m("Parser.BinaryExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].BinaryExpressionType,$n[1].IExpression,$n[1].IExpression],"pi":[{"n":"binaryExpressionType","pt":$n[1].BinaryExpressionType,"ps":0},{"n":"leftOperand","pt":$n[1].IExpression,"ps":1},{"n":"rightOperand","pt":$n[1].IExpression,"ps":2}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"BinaryExpressionType","t":16,"rt":$n[1].BinaryExpressionType,"g":{"a":2,"n":"get_BinaryExpressionType","t":8,"rt":$n[1].BinaryExpressionType,"fg":"BinaryExpressionType","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},"fn":"BinaryExpressionType"},{"a":2,"n":"LeftOperand","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_LeftOperand","t":8,"rt":$n[1].IExpression,"fg":"LeftOperand"},"fn":"LeftOperand"},{"a":2,"n":"RightOperand","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_RightOperand","t":8,"rt":$n[1].IExpression,"fg":"RightOperand"},"fn":"RightOperand"}]}; }, $n);
    $m("Parser.ValueExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Value],"pi":[{"n":"value","pt":$n[1].Value,"ps":0}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"Value","t":16,"rt":$n[1].Value,"g":{"a":2,"n":"get_Value","t":8,"rt":$n[1].Value,"fg":"Value"},"fn":"Value"}]}; }, $n);
    $m("Parser.IExpression", function () { return {"att":160,"a":4,"m":[{"ab":true,"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Parser$IExpression$Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]}]}; }, $n);
    $m("Parser.CallExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].IExpression,$n[0].IEnumerable$1(Parser.IExpression)],"pi":[{"n":"functionExpression","pt":$n[1].IExpression,"ps":0},{"n":"arguments","pt":$n[0].IEnumerable$1(Parser.IExpression),"ps":1}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"Arguments","t":16,"rt":$n[0].IEnumerable$1(Parser.IExpression),"g":{"a":2,"n":"get_Arguments","t":8,"rt":$n[0].IEnumerable$1(Parser.IExpression),"fg":"Arguments"},"fn":"Arguments"},{"a":2,"n":"FunctionExpression","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_FunctionExpression","t":8,"rt":$n[1].IExpression,"fg":"FunctionExpression"},"fn":"FunctionExpression"}]}; }, $n);
    $m("Parser.VariableExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Identifier],"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"Identifier","t":16,"rt":$n[1].Identifier,"g":{"a":2,"n":"get_Identifier","t":8,"rt":$n[1].Identifier,"fg":"Identifier"},"fn":"Identifier"}]}; }, $n);
    $m("Parser.VariableAssignmentExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Identifier,$n[1].IExpression],"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0},{"n":"expression","pt":$n[1].IExpression,"ps":1}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"Expression","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_Expression","t":8,"rt":$n[1].IExpression,"fg":"Expression"},"fn":"Expression"},{"a":2,"n":"Identifier","t":16,"rt":$n[1].Identifier,"g":{"a":2,"n":"get_Identifier","t":8,"rt":$n[1].Identifier,"fg":"Identifier"},"fn":"Identifier"}]}; }, $n);
    $m("Parser.IExpressionVisitor", function () { return {"att":160,"a":4,"m":[{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"binaryExpression","pt":$n[1].BinaryExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit","rt":$n[2].Void,"p":[$n[1].BinaryExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"functionExpression","pt":$n[1].CallExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$1","rt":$n[2].Void,"p":[$n[1].CallExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"functionAssignmentExpression","pt":$n[1].FunctionAssignmentExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$2","rt":$n[2].Void,"p":[$n[1].FunctionAssignmentExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"groupExpression","pt":$n[1].GroupExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$3","rt":$n[2].Void,"p":[$n[1].GroupExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"postfixExpression","pt":$n[1].PostfixExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$4","rt":$n[2].Void,"p":[$n[1].PostfixExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"prefixExpression","pt":$n[1].PrefixExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$5","rt":$n[2].Void,"p":[$n[1].PrefixExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"ternaryExpression","pt":$n[1].TernaryExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$6","rt":$n[2].Void,"p":[$n[1].TernaryExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"numberExpression","pt":$n[1].ValueExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$7","rt":$n[2].Void,"p":[$n[1].ValueExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableAssignmentExpression","pt":$n[1].VariableAssignmentExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$8","rt":$n[2].Void,"p":[$n[1].VariableAssignmentExpression]},{"ab":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableExpression","pt":$n[1].VariableExpression,"ps":0}],"sn":"Parser$IExpressionVisitor$Visit$9","rt":$n[2].Void,"p":[$n[1].VariableExpression]},{"ab":true,"a":2,"n":"Traversal","t":16,"rt":$n[1].Traversal,"g":{"ab":true,"a":2,"n":"get_Traversal","t":8,"rt":$n[1].Traversal,"fg":"Parser$IExpressionVisitor$Traversal","box":function ($v) { return Bridge.box($v, Parser.Traversal, System.Enum.toStringFn(Parser.Traversal));}},"fn":"Parser$IExpressionVisitor$Traversal"}]}; }, $n);
    $m("Parser.ExpressionVisitorExtensions", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":2,"n":"Traverse","is":true,"t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0},{"n":"visitSelf","pt":Function,"ps":1},{"n":"children","ip":true,"pt":System.Array.type(Parser.IExpression),"ps":2}],"sn":"Traverse","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor,Function,System.Array.type(Parser.IExpression)]}]}; }, $n);
    $m("Parser.BinaryExpressionType", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Addition","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Addition","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"Division","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Division","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"Equal","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Equal","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"Greater","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Greater","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"GreaterOrEqual","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"GreaterOrEqual","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"Less","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Less","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"LessOrEqual","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"LessOrEqual","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"Modulo","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Modulo","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"Multiplication","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Multiplication","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"NotEqual","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"NotEqual","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"Power","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Power","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}},{"a":2,"n":"Substraction","is":true,"t":4,"rt":$n[1].BinaryExpressionType,"sn":"Substraction","box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}}]}; }, $n);
    $m("Parser.PrefixExpressionType", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Negation","is":true,"t":4,"rt":$n[1].PrefixExpressionType,"sn":"Negation","box":function ($v) { return Bridge.box($v, Parser.PrefixExpressionType, System.Enum.toStringFn(Parser.PrefixExpressionType));}},{"a":2,"n":"Positive","is":true,"t":4,"rt":$n[1].PrefixExpressionType,"sn":"Positive","box":function ($v) { return Bridge.box($v, Parser.PrefixExpressionType, System.Enum.toStringFn(Parser.PrefixExpressionType));}}]}; }, $n);
    $m("Parser.PrefixExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].PrefixExpressionType,$n[1].IExpression],"pi":[{"n":"prefixExpressionType","pt":$n[1].PrefixExpressionType,"ps":0},{"n":"rightOperand","pt":$n[1].IExpression,"ps":1}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"PrefixExpressionType","t":16,"rt":$n[1].PrefixExpressionType,"g":{"a":2,"n":"get_PrefixExpressionType","t":8,"rt":$n[1].PrefixExpressionType,"fg":"PrefixExpressionType","box":function ($v) { return Bridge.box($v, Parser.PrefixExpressionType, System.Enum.toStringFn(Parser.PrefixExpressionType));}},"fn":"PrefixExpressionType"},{"a":2,"n":"RightOperand","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_RightOperand","t":8,"rt":$n[1].IExpression,"fg":"RightOperand"},"fn":"RightOperand"}]}; }, $n);
    $m("Parser.PostfixExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].PostfixExpressionType,$n[1].IExpression],"pi":[{"n":"postfixExpressionType","pt":$n[1].PostfixExpressionType,"ps":0},{"n":"leftOperand","pt":$n[1].IExpression,"ps":1}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"LeftOperand","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_LeftOperand","t":8,"rt":$n[1].IExpression,"fg":"LeftOperand"},"fn":"LeftOperand"},{"a":2,"n":"PostfixExpressionType","t":16,"rt":$n[1].PostfixExpressionType,"g":{"a":2,"n":"get_PostfixExpressionType","t":8,"rt":$n[1].PostfixExpressionType,"fg":"PostfixExpressionType","box":function ($v) { return Bridge.box($v, Parser.PostfixExpressionType, System.Enum.toStringFn(Parser.PostfixExpressionType));}},"fn":"PostfixExpressionType"}]}; }, $n);
    $m("Parser.MathParser", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"expression","pt":$n[2].String,"ps":0}],"sn":"Parse","rt":$n[1].Expression,"p":[$n[2].String]}]}; }, $n);
    $m("Parser.PostfixExpressionType", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Factorial","is":true,"t":4,"rt":$n[1].PostfixExpressionType,"sn":"Factorial","box":function ($v) { return Bridge.box($v, Parser.PostfixExpressionType, System.Enum.toStringFn(Parser.PostfixExpressionType));}}]}; }, $n);
    $m("Parser.Associativity", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Left","is":true,"t":4,"rt":$n[1].Associativity,"sn":"Left","box":function ($v) { return Bridge.box($v, Parser.Associativity, System.Enum.toStringFn(Parser.Associativity));}},{"a":2,"n":"Right","is":true,"t":4,"rt":$n[1].Associativity,"sn":"Right","box":function ($v) { return Bridge.box($v, Parser.Associativity, System.Enum.toStringFn(Parser.Associativity));}}]}; }, $n);
    $m("Parser.AssociativityExtensions", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":2,"n":"ToPrecedenceIncrement","is":true,"t":8,"pi":[{"n":"associativity","pt":$n[1].Associativity,"ps":0}],"sn":"ToPrecedenceIncrement","rt":$n[2].Int32,"p":[$n[1].Associativity],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Parser.TernaryExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].IExpression,$n[1].IExpression,$n[1].IExpression],"pi":[{"n":"condition","pt":$n[1].IExpression,"ps":0},{"n":"trueCase","pt":$n[1].IExpression,"ps":1},{"n":"falseCase","pt":$n[1].IExpression,"ps":2}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"Condition","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_Condition","t":8,"rt":$n[1].IExpression,"fg":"Condition"},"fn":"Condition"},{"a":2,"n":"FalseCase","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_FalseCase","t":8,"rt":$n[1].IExpression,"fg":"FalseCase"},"fn":"FalseCase"},{"a":2,"n":"TrueCase","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_TrueCase","t":8,"rt":$n[1].IExpression,"fg":"TrueCase"},"fn":"TrueCase"}]}; }, $n);
    $m("Parser.FunctionAssignmentExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Identifier,$n[0].IEnumerable$1(Parser.Identifier),$n[1].IExpression],"pi":[{"n":"functionIdentifier","pt":$n[1].Identifier,"ps":0},{"n":"arguments","pt":$n[0].IEnumerable$1(Parser.Identifier),"ps":1},{"n":"expression","pt":$n[1].IExpression,"ps":2}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"ArgumentNames","t":16,"rt":$n[0].IEnumerable$1(Parser.Identifier),"g":{"a":2,"n":"get_ArgumentNames","t":8,"rt":$n[0].IEnumerable$1(Parser.Identifier),"fg":"ArgumentNames"},"fn":"ArgumentNames"},{"a":2,"n":"Expression","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_Expression","t":8,"rt":$n[1].IExpression,"fg":"Expression"},"fn":"Expression"},{"a":2,"n":"FunctionIdentifier","t":16,"rt":$n[1].Identifier,"g":{"a":2,"n":"get_FunctionIdentifier","t":8,"rt":$n[1].Identifier,"fg":"FunctionIdentifier"},"fn":"FunctionIdentifier"}]}; }, $n);
    $m("Parser.BottomUpExpressionVisitor", function () { return {"att":1048704,"a":4,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"binaryExpression","pt":$n[1].BinaryExpression,"ps":0}],"sn":"Visit","rt":$n[2].Void,"p":[$n[1].BinaryExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"functionExpression","pt":$n[1].CallExpression,"ps":0}],"sn":"Visit$1","rt":$n[2].Void,"p":[$n[1].CallExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"functionAssignmentExpression","pt":$n[1].FunctionAssignmentExpression,"ps":0}],"sn":"Visit$2","rt":$n[2].Void,"p":[$n[1].FunctionAssignmentExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"groupExpression","pt":$n[1].GroupExpression,"ps":0}],"sn":"Visit$3","rt":$n[2].Void,"p":[$n[1].GroupExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"postfixExpression","pt":$n[1].PostfixExpression,"ps":0}],"sn":"Visit$4","rt":$n[2].Void,"p":[$n[1].PostfixExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"prefixExpression","pt":$n[1].PrefixExpression,"ps":0}],"sn":"Visit$5","rt":$n[2].Void,"p":[$n[1].PrefixExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"ternaryExpression","pt":$n[1].TernaryExpression,"ps":0}],"sn":"Visit$6","rt":$n[2].Void,"p":[$n[1].TernaryExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"valueExpression","pt":$n[1].ValueExpression,"ps":0}],"sn":"Visit$7","rt":$n[2].Void,"p":[$n[1].ValueExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableAssignmentExpression","pt":$n[1].VariableAssignmentExpression,"ps":0}],"sn":"Visit$8","rt":$n[2].Void,"p":[$n[1].VariableAssignmentExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableExpression","pt":$n[1].VariableExpression,"ps":0}],"sn":"Visit$9","rt":$n[2].Void,"p":[$n[1].VariableExpression]},{"a":2,"n":"Traversal","t":16,"rt":$n[1].Traversal,"g":{"a":2,"n":"get_Traversal","t":8,"rt":$n[1].Traversal,"fg":"Traversal","box":function ($v) { return Bridge.box($v, Parser.Traversal, System.Enum.toStringFn(Parser.Traversal));}},"fn":"Traversal"}]}; }, $n);
    $m("Parser.AssignVisitor", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].ISymbolManager],"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0}],"sn":"ctor"},{"a":2,"n":"GetFunction","is":true,"t":8,"pi":[{"n":"functionAssignmentExpression","pt":$n[1].FunctionAssignmentExpression,"ps":0},{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":1}],"sn":"GetFunction","rt":$n[1].Value,"p":[$n[1].FunctionAssignmentExpression,$n[1].ISymbolManager]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"functionAssignmentExpression","pt":$n[1].FunctionAssignmentExpression,"ps":0}],"sn":"Visit$2","rt":$n[2].Void,"p":[$n[1].FunctionAssignmentExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableAssignmentExpression","pt":$n[1].VariableAssignmentExpression,"ps":0}],"sn":"Visit$8","rt":$n[2].Void,"p":[$n[1].VariableAssignmentExpression]},{"a":1,"n":"_symbolManager","t":4,"rt":$n[1].ISymbolManager,"sn":"_symbolManager","ro":true}]}; }, $n);
    $m("Parser.FunctionExpressionVisitor", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].IEnumerable$1(Parser.Identifier),System.Array.type(Parser.Value),$n[1].ISymbolManager],"pi":[{"n":"argNames","pt":$n[0].IEnumerable$1(Parser.Identifier),"ps":0},{"n":"arguments","pt":System.Array.type(Parser.Value),"ps":1},{"n":"symbolProvider","pt":$n[1].ISymbolManager,"ps":2}],"sn":"ctor"},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableExpression","pt":$n[1].VariableExpression,"ps":0}],"sn":"Visit$9","rt":$n[2].Void,"p":[$n[1].VariableExpression]},{"a":1,"n":"argNames","t":4,"rt":$n[0].IEnumerable$1(Parser.Identifier),"sn":"argNames"},{"a":1,"n":"arguments","t":4,"rt":System.Array.type(Parser.Value),"sn":"arguments"}]}; }, $n);
    $m("Parser.PrintVisitor", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetResult","t":8,"sn":"GetResult","rt":$n[2].String},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"binaryExpression","pt":$n[1].BinaryExpression,"ps":0}],"sn":"Visit","rt":$n[2].Void,"p":[$n[1].BinaryExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"functionExpression","pt":$n[1].CallExpression,"ps":0}],"sn":"Visit$1","rt":$n[2].Void,"p":[$n[1].CallExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"functionAssignmentExpression","pt":$n[1].FunctionAssignmentExpression,"ps":0}],"sn":"Visit$2","rt":$n[2].Void,"p":[$n[1].FunctionAssignmentExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"postfixExpression","pt":$n[1].PostfixExpression,"ps":0}],"sn":"Visit$4","rt":$n[2].Void,"p":[$n[1].PostfixExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"prefixExpression","pt":$n[1].PrefixExpression,"ps":0}],"sn":"Visit$5","rt":$n[2].Void,"p":[$n[1].PrefixExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"ternaryExpression","pt":$n[1].TernaryExpression,"ps":0}],"sn":"Visit$6","rt":$n[2].Void,"p":[$n[1].TernaryExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"valueExpression","pt":$n[1].ValueExpression,"ps":0}],"sn":"Visit$7","rt":$n[2].Void,"p":[$n[1].ValueExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableAssignmentExpression","pt":$n[1].VariableAssignmentExpression,"ps":0}],"sn":"Visit$8","rt":$n[2].Void,"p":[$n[1].VariableAssignmentExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableExpression","pt":$n[1].VariableExpression,"ps":0}],"sn":"Visit$9","rt":$n[2].Void,"p":[$n[1].VariableExpression]},{"a":1,"n":"_stack","t":4,"rt":$n[0].Stack$1(System.String),"sn":"_stack","ro":true}]}; }, $n);
    $m("Parser.ParserException", function () { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String],"pi":[{"n":"message","pt":$n[2].String,"ps":0}],"sn":"$ctor1"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String,$n[2].Exception],"pi":[{"n":"message","pt":$n[2].String,"ps":0},{"n":"innerException","pt":$n[2].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("Parser.ExpectedTokenException", function () { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String],"pi":[{"n":"message","pt":$n[2].String,"ps":0}],"sn":"$ctor1"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String,$n[2].Exception],"pi":[{"n":"message","pt":$n[2].String,"ps":0},{"n":"innerException","pt":$n[2].Exception,"ps":1}],"sn":"$ctor2"},{"a":4,"n":".ctor","t":1,"p":[$n[3].TokenType,$n[2].Int32],"pi":[{"n":"tokenType","pt":$n[3].TokenType,"ps":0},{"n":"position","pt":$n[2].Int32,"ps":1}],"sn":"$ctor3"},{"a":2,"n":"Position","t":16,"rt":$n[2].Int32,"g":{"a":2,"n":"get_Position","t":8,"rt":$n[2].Int32,"fg":"Position","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Position"},{"a":2,"n":"TokenType","t":16,"rt":$n[3].TokenType,"g":{"a":2,"n":"get_TokenType","t":8,"rt":$n[3].TokenType,"fg":"TokenType","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},"fn":"TokenType"}]}; }, $n);
    $m("Parser.GraphvizVisitor", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetResult","t":8,"sn":"GetResult","rt":$n[2].String},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"binaryExpression","pt":$n[1].BinaryExpression,"ps":0}],"sn":"Visit","rt":$n[2].Void,"p":[$n[1].BinaryExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"functionExpression","pt":$n[1].CallExpression,"ps":0}],"sn":"Visit$1","rt":$n[2].Void,"p":[$n[1].CallExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"prefixExpression","pt":$n[1].PrefixExpression,"ps":0}],"sn":"Visit$5","rt":$n[2].Void,"p":[$n[1].PrefixExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"ternaryExpression","pt":$n[1].TernaryExpression,"ps":0}],"sn":"Visit$6","rt":$n[2].Void,"p":[$n[1].TernaryExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"valueExpression","pt":$n[1].ValueExpression,"ps":0}],"sn":"Visit$7","rt":$n[2].Void,"p":[$n[1].ValueExpression]},{"ov":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableExpression","pt":$n[1].VariableExpression,"ps":0}],"sn":"Visit$9","rt":$n[2].Void,"p":[$n[1].VariableExpression]},{"a":1,"n":"consume","t":8,"pi":[{"n":"nodeName","pt":$n[2].String,"ps":0},{"n":"count","pt":$n[2].Int32,"ps":1}],"sn":"consume","rt":$n[2].Void,"p":[$n[2].String,$n[2].Int32]},{"a":1,"n":"id","t":4,"rt":$n[2].Int32,"sn":"id","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"idStack","t":4,"rt":$n[0].Stack$1(System.Int32),"sn":"idStack"},{"a":1,"n":"stringBuilder","t":4,"rt":$n[4].StringBuilder,"sn":"stringBuilder"}]}; }, $n);
    $m("Parser.ExpressionParser", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"tokenStream","pt":$n[1].TokenStream,"ps":0}],"sn":"Parse","rt":$n[1].IExpression,"p":[$n[1].TokenStream]},{"a":1,"n":"ParseExpression","t":8,"pi":[{"n":"tokenStream","pt":$n[1].TokenStream,"ps":0},{"n":"precedence","pt":$n[2].Int32,"ps":1}],"sn":"ParseExpression","rt":$n[1].IExpression,"p":[$n[1].TokenStream,$n[2].Int32]}]}; }, $n);
    $m("Parser.Precedences", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ASSIGNMENT","is":true,"t":4,"rt":$n[2].Int32,"sn":"ASSIGNMENT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CALL","is":true,"t":4,"rt":$n[2].Int32,"sn":"CALL","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"COMPARISON","is":true,"t":4,"rt":$n[2].Int32,"sn":"COMPARISON","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CONDITIONAL","is":true,"t":4,"rt":$n[2].Int32,"sn":"CONDITIONAL","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"EXPONENT","is":true,"t":4,"rt":$n[2].Int32,"sn":"EXPONENT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"EXPRESSION","is":true,"t":4,"rt":$n[2].Int32,"sn":"EXPRESSION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"POSTFIX","is":true,"t":4,"rt":$n[2].Int32,"sn":"POSTFIX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"PREFIX","is":true,"t":4,"rt":$n[2].Int32,"sn":"PREFIX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"PRODUCT","is":true,"t":4,"rt":$n[2].Int32,"sn":"PRODUCT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"SUM","is":true,"t":4,"rt":$n[2].Int32,"sn":"SUM","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Parser.IPrefixParselet", function () { return {"att":160,"a":4,"m":[{"ab":true,"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"token","pt":$n[3].Token,"ps":2}],"sn":"Parser$IPrefixParselet$Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[3].Token]}]}; }, $n);
    $m("Parser.IInfixParselet", function () { return {"att":160,"a":4,"m":[{"ab":true,"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"leftExpression","pt":$n[1].IExpression,"ps":2}],"sn":"Parser$IInfixParselet$Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[1].IExpression]},{"ab":true,"a":2,"n":"Precedence","t":16,"rt":$n[2].Int32,"g":{"ab":true,"a":2,"n":"get_Precedence","t":8,"rt":$n[2].Int32,"fg":"Parser$IInfixParselet$Precedence","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Parser$IInfixParselet$Precedence"}]}; }, $n);
    $m("Parser.PostfixOperatorParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].PostfixExpressionType,$n[2].Int32],"pi":[{"n":"postfixExpressionType","pt":$n[1].PostfixExpressionType,"ps":0},{"n":"precedence","pt":$n[2].Int32,"ps":1}],"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"leftExpression","pt":$n[1].IExpression,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[1].IExpression]},{"a":2,"n":"Precedence","t":16,"rt":$n[2].Int32,"g":{"a":2,"n":"get_Precedence","t":8,"rt":$n[2].Int32,"fg":"Precedence","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Precedence"},{"a":1,"n":"_postfixExpressionType","t":4,"rt":$n[1].PostfixExpressionType,"sn":"_postfixExpressionType","ro":true,"box":function ($v) { return Bridge.box($v, Parser.PostfixExpressionType, System.Enum.toStringFn(Parser.PostfixExpressionType));}}]}; }, $n);
    $m("Parser.PrefixOperatorParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].PrefixExpressionType,$n[2].Int32],"pi":[{"n":"prefixExpressionType","pt":$n[1].PrefixExpressionType,"ps":0},{"n":"precedence","pt":$n[2].Int32,"ps":1}],"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"token","pt":$n[3].Token,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[3].Token]},{"a":1,"n":"_precedence","t":4,"rt":$n[2].Int32,"sn":"_precedence","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_prefixExpressionType","t":4,"rt":$n[1].PrefixExpressionType,"sn":"_prefixExpressionType","ro":true,"box":function ($v) { return Bridge.box($v, Parser.PrefixExpressionType, System.Enum.toStringFn(Parser.PrefixExpressionType));}}]}; }, $n);
    $m("Parser.BinaryOperatorParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].BinaryExpressionType,$n[2].Int32,$n[1].Associativity],"pi":[{"n":"binaryExpressionType","pt":$n[1].BinaryExpressionType,"ps":0},{"n":"precedence","pt":$n[2].Int32,"ps":1},{"n":"associativity","pt":$n[1].Associativity,"ps":2}],"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"leftExpression","pt":$n[1].IExpression,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[1].IExpression]},{"a":2,"n":"Precedence","t":16,"rt":$n[2].Int32,"g":{"a":2,"n":"get_Precedence","t":8,"rt":$n[2].Int32,"fg":"Precedence","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Precedence"},{"a":1,"n":"_associativity","t":4,"rt":$n[1].Associativity,"sn":"_associativity","ro":true,"box":function ($v) { return Bridge.box($v, Parser.Associativity, System.Enum.toStringFn(Parser.Associativity));}},{"a":1,"n":"_binaryExpressionType","t":4,"rt":$n[1].BinaryExpressionType,"sn":"_binaryExpressionType","ro":true,"box":function ($v) { return Bridge.box($v, Parser.BinaryExpressionType, System.Enum.toStringFn(Parser.BinaryExpressionType));}}]}; }, $n);
    $m("Parser.GroupParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"token","pt":$n[3].Token,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[3].Token]}]}; }, $n);
    $m("Parser.TernaryParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"leftExpression","pt":$n[1].IExpression,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[1].IExpression]},{"a":2,"n":"Precedence","t":16,"rt":$n[2].Int32,"g":{"a":2,"n":"get_Precedence","t":8,"rt":$n[2].Int32,"fg":"Precedence","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Precedence"}]}; }, $n);
    $m("Parser.IntegerParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"token","pt":$n[3].Token,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[3].Token]}]}; }, $n);
    $m("Parser.VariableParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"token","pt":$n[3].Token,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[3].Token]}]}; }, $n);
    $m("Parser.CallParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"leftExpression","pt":$n[1].IExpression,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[1].IExpression]},{"a":2,"n":"Precedence","t":16,"rt":$n[2].Int32,"g":{"a":2,"n":"get_Precedence","t":8,"rt":$n[2].Int32,"fg":"Precedence","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Precedence"}]}; }, $n);
    $m("Parser.BadAssignmentException", function () { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String],"pi":[{"n":"message","pt":$n[2].String,"ps":0}],"sn":"$ctor1"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String,$n[2].Exception],"pi":[{"n":"message","pt":$n[2].String,"ps":0},{"n":"innerException","pt":$n[2].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("Parser.AssignParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"leftExpression","pt":$n[1].IExpression,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[1].IExpression]},{"a":2,"n":"Precedence","t":16,"rt":$n[2].Int32,"g":{"a":2,"n":"get_Precedence","t":8,"rt":$n[2].Int32,"fg":"Precedence","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Precedence"}]}; }, $n);
    $m("Parser.UnknownVariableException", function () { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String],"pi":[{"n":"message","pt":$n[2].String,"ps":0}],"sn":"$ctor1"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String,$n[2].Exception],"pi":[{"n":"message","pt":$n[2].String,"ps":0},{"n":"innerException","pt":$n[2].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("Parser.GroupExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].IExpression],"pi":[{"n":"operand","pt":$n[1].IExpression,"ps":0}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"Operand","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_Operand","t":8,"rt":$n[1].IExpression,"fg":"Operand"},"fn":"Operand"}]}; }, $n);
    $m("Parser.EvaluationException", function () { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String],"pi":[{"n":"message","pt":$n[2].String,"ps":0}],"sn":"$ctor1"},{"a":4,"n":".ctor","t":1,"p":[$n[2].String,$n[2].Exception],"pi":[{"n":"message","pt":$n[2].String,"ps":0},{"n":"innerException","pt":$n[2].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("Parser.Traversal", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BottomUp","is":true,"t":4,"rt":$n[1].Traversal,"sn":"BottomUp","box":function ($v) { return Bridge.box($v, Parser.Traversal, System.Enum.toStringFn(Parser.Traversal));}},{"a":2,"n":"None","is":true,"t":4,"rt":$n[1].Traversal,"sn":"None","box":function ($v) { return Bridge.box($v, Parser.Traversal, System.Enum.toStringFn(Parser.Traversal));}}]}; }, $n);
    $m("Parser.SymbolManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Get","t":8,"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0}],"sn":"Get","rt":$n[1].Value,"p":[$n[1].Identifier]},{"a":2,"n":"IsSet","t":8,"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0}],"sn":"IsSet","rt":$n[2].Boolean,"p":[$n[1].Identifier],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Set","t":8,"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0},{"n":"value","pt":$n[1].Value,"ps":1}],"sn":"Set","rt":$n[2].Void,"p":[$n[1].Identifier,$n[1].Value]},{"a":1,"n":"_symbols","t":4,"rt":$n[0].Dictionary$2(Parser.Identifier,Parser.Value),"sn":"_symbols","ro":true}]}; }, $n);
    $m("Parser.ISymbolManager", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Get","t":8,"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0}],"sn":"Parser$ISymbolManager$Get","rt":$n[1].Value,"p":[$n[1].Identifier]},{"ab":true,"a":2,"n":"IsSet","t":8,"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0}],"sn":"Parser$ISymbolManager$IsSet","rt":$n[2].Boolean,"p":[$n[1].Identifier],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Set","t":8,"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0},{"n":"value","pt":$n[1].Value,"ps":1}],"sn":"Parser$ISymbolManager$Set","rt":$n[2].Void,"p":[$n[1].Identifier,$n[1].Value]}]}; }, $n);
    $m("Parser.SymbolManagerExtensions", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"SetBoolean","is":true,"t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0},{"n":"identifier","pt":$n[1].Identifier,"ps":1},{"n":"b","pt":$n[2].Boolean,"ps":2}],"sn":"SetBoolean","rt":$n[2].Void,"p":[$n[1].ISymbolManager,$n[1].Identifier,$n[2].Boolean]},{"a":2,"n":"SetDecimal","is":true,"t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0},{"n":"identifier","pt":$n[1].Identifier,"ps":1},{"n":"d","pt":$n[2].Double,"ps":2}],"sn":"SetDecimal","rt":$n[2].Void,"p":[$n[1].ISymbolManager,$n[1].Identifier,$n[2].Double]},{"a":2,"n":"SetFunction","is":true,"t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0},{"n":"identifier","pt":$n[1].Identifier,"ps":1},{"n":"function","pt":Function,"ps":2}],"sn":"SetFunction","rt":$n[2].Void,"p":[$n[1].ISymbolManager,$n[1].Identifier,Function]},{"a":2,"n":"SetInteger","is":true,"t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0},{"n":"identifier","pt":$n[1].Identifier,"ps":1},{"n":"l","pt":$n[2].Int64,"ps":2}],"sn":"SetInteger","rt":$n[2].Void,"p":[$n[1].ISymbolManager,$n[1].Identifier,$n[2].Int64]}]}; }, $n);
    $m("Parser.TrigonometrySymbols", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":1,"n":"Define","is":true,"t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0},{"n":"symbolName","pt":$n[2].String,"ps":1},{"n":"method","pt":Function,"ps":2}],"sn":"Define","rt":$n[2].Void,"p":[$n[1].ISymbolManager,$n[2].String,Function]},{"a":2,"n":"SetTrigonometrySymbols","is":true,"t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0}],"sn":"SetTrigonometrySymbols","rt":$n[2].Void,"p":[$n[1].ISymbolManager]}]}; }, $n);
    $m("Parser.FixValueParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Value],"pi":[{"n":"value","pt":$n[1].Value,"ps":0}],"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"token","pt":$n[3].Token,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[3].Token]},{"a":1,"n":"_value","t":4,"rt":$n[1].Value,"sn":"_value","ro":true}]}; }, $n);
    $m("Parser.FloatingPointNumberParselet", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Parse","t":8,"pi":[{"n":"parseExpression","pt":Function,"ps":0},{"n":"tokenStream","pt":$n[1].TokenStream,"ps":1},{"n":"token","pt":$n[3].Token,"ps":2}],"sn":"Parse","rt":$n[1].IExpression,"p":[Function,$n[1].TokenStream,$n[3].Token]}]}; }, $n);
    $m("Parser.SymbolicExpression", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].IExpression],"pi":[{"n":"operand","pt":$n[1].IExpression,"ps":0}],"sn":"ctor"},{"a":2,"n":"Accept","t":8,"pi":[{"n":"visitor","pt":$n[1].IExpressionVisitor,"ps":0}],"sn":"Accept","rt":$n[2].Void,"p":[$n[1].IExpressionVisitor]},{"a":2,"n":"Operand","t":16,"rt":$n[1].IExpression,"g":{"a":2,"n":"get_Operand","t":8,"rt":$n[1].IExpression,"fg":"Operand"},"fn":"Operand"}]}; }, $n);
    $m("Parser.Expression", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[1].IExpression],"pi":[{"n":"expression","pt":$n[1].IExpression,"ps":0}],"sn":"ctor"},{"a":2,"n":"Evaluate","t":8,"sn":"Evaluate","rt":$n[1].Value},{"a":2,"n":"Evaluate","t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0}],"sn":"Evaluate$1","rt":$n[1].Value,"p":[$n[1].ISymbolManager]},{"a":2,"n":"ExecuteAssignments","t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0}],"sn":"ExecuteAssignments","rt":$n[2].Void,"p":[$n[1].ISymbolManager]},{"a":2,"n":"ToDebug","t":8,"sn":"ToDebug","rt":$n[2].String},{"a":2,"n":"ToGraphviz","t":8,"sn":"ToGraphviz","rt":$n[2].String},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[2].String},{"a":4,"n":"Expr","t":16,"rt":$n[1].IExpression,"g":{"a":4,"n":"get_Expr","t":8,"rt":$n[1].IExpression,"fg":"Expr"},"fn":"Expr"}]}; }, $n);
    $m("Parser.EvaluationVisitor", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].ISymbolManager],"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0}],"sn":"ctor"},{"a":2,"n":"GetResult","t":8,"sn":"GetResult","rt":$n[1].Value},{"a":2,"n":"Visit","t":8,"pi":[{"n":"binaryExpression","pt":$n[1].BinaryExpression,"ps":0}],"sn":"Visit","rt":$n[2].Void,"p":[$n[1].BinaryExpression]},{"a":2,"n":"Visit","t":8,"pi":[{"n":"functionExpression","pt":$n[1].CallExpression,"ps":0}],"sn":"Visit$1","rt":$n[2].Void,"p":[$n[1].CallExpression]},{"a":2,"n":"Visit","t":8,"pi":[{"n":"functionAssignmentExpression","pt":$n[1].FunctionAssignmentExpression,"ps":0}],"sn":"Visit$2","rt":$n[2].Void,"p":[$n[1].FunctionAssignmentExpression]},{"a":2,"n":"Visit","t":8,"pi":[{"n":"groupExpression","pt":$n[1].GroupExpression,"ps":0}],"sn":"Visit$3","rt":$n[2].Void,"p":[$n[1].GroupExpression]},{"a":2,"n":"Visit","t":8,"pi":[{"n":"postfixExpression","pt":$n[1].PostfixExpression,"ps":0}],"sn":"Visit$4","rt":$n[2].Void,"p":[$n[1].PostfixExpression]},{"a":2,"n":"Visit","t":8,"pi":[{"n":"prefixExpression","pt":$n[1].PrefixExpression,"ps":0}],"sn":"Visit$5","rt":$n[2].Void,"p":[$n[1].PrefixExpression]},{"a":2,"n":"Visit","t":8,"pi":[{"n":"ternaryExpression","pt":$n[1].TernaryExpression,"ps":0}],"sn":"Visit$6","rt":$n[2].Void,"p":[$n[1].TernaryExpression]},{"a":2,"n":"Visit","t":8,"pi":[{"n":"valueExpression","pt":$n[1].ValueExpression,"ps":0}],"sn":"Visit$7","rt":$n[2].Void,"p":[$n[1].ValueExpression]},{"a":2,"n":"Visit","t":8,"pi":[{"n":"variableAssignmentExpression","pt":$n[1].VariableAssignmentExpression,"ps":0}],"sn":"Visit$8","rt":$n[2].Void,"p":[$n[1].VariableAssignmentExpression]},{"v":true,"a":2,"n":"Visit","t":8,"pi":[{"n":"variableExpression","pt":$n[1].VariableExpression,"ps":0}],"sn":"Visit$9","rt":$n[2].Void,"p":[$n[1].VariableExpression]},{"a":2,"n":"Traversal","t":16,"rt":$n[1].Traversal,"g":{"a":2,"n":"get_Traversal","t":8,"rt":$n[1].Traversal,"fg":"Traversal","box":function ($v) { return Bridge.box($v, Parser.Traversal, System.Enum.toStringFn(Parser.Traversal));}},"fn":"Traversal"},{"a":3,"n":"_evaluationStack","t":4,"rt":$n[0].Stack$1(Parser.Value),"sn":"_evaluationStack","ro":true},{"a":1,"n":"_symbolManager","t":4,"rt":$n[1].ISymbolManager,"sn":"_symbolManager","ro":true}]}; }, $n);
    $m("Parser.Value", function () { return {"nested":[$n[1].Value.Type],"att":1048577,"a":2,"m":[{"a":1,"n":".ctor","t":1,"p":[$n[1].Value.Type,$n[2].Object],"pi":[{"n":"valueType","pt":$n[1].Value.Type,"ps":0},{"n":"value","pt":$n[2].Object,"ps":1}],"sn":"ctor"},{"a":2,"n":"Add","is":true,"t":8,"pi":[{"n":"valueA","pt":$n[1].Value,"ps":0},{"n":"valueB","pt":$n[1].Value,"ps":1}],"sn":"Add","rt":$n[1].Value,"p":[$n[1].Value,$n[1].Value]},{"a":2,"n":"Boolean","is":true,"t":8,"pi":[{"n":"b","pt":$n[2].Boolean,"ps":0}],"sn":"Boolean","rt":$n[1].Value,"p":[$n[2].Boolean]},{"a":2,"n":"Decimal","is":true,"t":8,"pi":[{"n":"d","pt":$n[2].Double,"ps":0}],"sn":"Decimal","rt":$n[1].Value,"p":[$n[2].Double]},{"a":2,"n":"Empty","is":true,"t":8,"sn":"Empty","rt":$n[1].Value},{"a":2,"n":"Expression","is":true,"t":8,"pi":[{"n":"expression","pt":$n[1].Expression,"ps":0}],"sn":"Expression","rt":$n[1].Value,"p":[$n[1].Expression]},{"a":2,"n":"Function","is":true,"t":8,"pi":[{"n":"function","pt":Function,"ps":0}],"sn":"Function","rt":$n[1].Value,"p":[Function]},{"a":2,"n":"Integer","is":true,"t":8,"pi":[{"n":"l","pt":$n[2].Int64,"ps":0}],"sn":"Integer","rt":$n[1].Value,"p":[$n[2].Int64]},{"a":2,"n":"ToBoolean","t":8,"sn":"ToBoolean","rt":$n[2].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ToDouble","t":8,"sn":"ToDouble","rt":$n[2].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"ToExpression","t":8,"sn":"ToExpression","rt":$n[1].Expression},{"a":2,"n":"ToFunction","t":8,"sn":"ToFunction","rt":Function},{"a":2,"n":"ToInt64","t":8,"sn":"ToInt64","rt":$n[2].Int64},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[2].String},{"a":2,"n":"IsBoolean","t":16,"rt":$n[2].Boolean,"g":{"a":2,"n":"get_IsBoolean","t":8,"rt":$n[2].Boolean,"fg":"IsBoolean","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsBoolean"},{"a":2,"n":"IsDecimal","t":16,"rt":$n[2].Boolean,"g":{"a":2,"n":"get_IsDecimal","t":8,"rt":$n[2].Boolean,"fg":"IsDecimal","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsDecimal"},{"a":2,"n":"IsEmpty","t":16,"rt":$n[2].Boolean,"g":{"a":2,"n":"get_IsEmpty","t":8,"rt":$n[2].Boolean,"fg":"IsEmpty","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsEmpty"},{"a":2,"n":"IsExpression","t":16,"rt":$n[2].Boolean,"g":{"a":2,"n":"get_IsExpression","t":8,"rt":$n[2].Boolean,"fg":"IsExpression","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsExpression"},{"a":2,"n":"IsFunction","t":16,"rt":$n[2].Boolean,"g":{"a":2,"n":"get_IsFunction","t":8,"rt":$n[2].Boolean,"fg":"IsFunction","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsFunction"},{"a":2,"n":"IsInteger","t":16,"rt":$n[2].Boolean,"g":{"a":2,"n":"get_IsInteger","t":8,"rt":$n[2].Boolean,"fg":"IsInteger","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsInteger"},{"a":4,"n":"ValueType","t":16,"rt":$n[1].Value.Type,"g":{"a":4,"n":"get_ValueType","t":8,"rt":$n[1].Value.Type,"fg":"ValueType","box":function ($v) { return Bridge.box($v, Parser.Value.Type, System.Enum.toStringFn(Parser.Value.Type));}},"fn":"ValueType"},{"a":1,"n":"_value","t":4,"rt":$n[2].Object,"sn":"_value","ro":true}]}; }, $n);
    $m("Parser.Value.Type", function () { return {"td":$n[1].Value,"att":261,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Boolean","is":true,"t":4,"rt":$n[1].Value.Type,"sn":"Boolean","box":function ($v) { return Bridge.box($v, Parser.Value.Type, System.Enum.toStringFn(Parser.Value.Type));}},{"a":2,"n":"Decimal","is":true,"t":4,"rt":$n[1].Value.Type,"sn":"Decimal","box":function ($v) { return Bridge.box($v, Parser.Value.Type, System.Enum.toStringFn(Parser.Value.Type));}},{"a":2,"n":"Empty","is":true,"t":4,"rt":$n[1].Value.Type,"sn":"Empty","box":function ($v) { return Bridge.box($v, Parser.Value.Type, System.Enum.toStringFn(Parser.Value.Type));}},{"a":2,"n":"Expression","is":true,"t":4,"rt":$n[1].Value.Type,"sn":"Expression","box":function ($v) { return Bridge.box($v, Parser.Value.Type, System.Enum.toStringFn(Parser.Value.Type));}},{"a":2,"n":"Function","is":true,"t":4,"rt":$n[1].Value.Type,"sn":"Function","box":function ($v) { return Bridge.box($v, Parser.Value.Type, System.Enum.toStringFn(Parser.Value.Type));}},{"a":2,"n":"Integer","is":true,"t":4,"rt":$n[1].Value.Type,"sn":"Integer","box":function ($v) { return Bridge.box($v, Parser.Value.Type, System.Enum.toStringFn(Parser.Value.Type));}}]}; }, $n);
    $m("Parser.EvaluateSymbols", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"SetEvalSymbol","is":true,"t":8,"pi":[{"n":"symbolManager","pt":$n[1].ISymbolManager,"ps":0}],"sn":"SetEvalSymbol","rt":$n[2].Void,"p":[$n[1].ISymbolManager]}]}; }, $n);
    $m("Parser.Identifier", function () { return {"att":1048577,"a":2,"m":[{"a":1,"n":".ctor","t":1,"p":[$n[2].String],"pi":[{"n":"name","pt":$n[2].String,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[2].Object,"ps":0}],"sn":"equals","rt":$n[2].Boolean,"p":[$n[2].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[2].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[2].String},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"identifier1","pt":$n[1].Identifier,"ps":0},{"n":"identifier2","pt":$n[1].Identifier,"ps":1}],"sn":"op_Equality","rt":$n[2].Boolean,"p":[$n[1].Identifier,$n[1].Identifier],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"identifier","pt":$n[1].Identifier,"ps":0}],"sn":"op_Implicit$1","rt":$n[2].String,"p":[$n[1].Identifier]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"name","pt":$n[2].String,"ps":0}],"sn":"op_Implicit","rt":$n[1].Identifier,"p":[$n[2].String]},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"identifier1","pt":$n[1].Identifier,"ps":0},{"n":"identifier2","pt":$n[1].Identifier,"ps":1}],"sn":"op_Inequality","rt":$n[2].Boolean,"p":[$n[1].Identifier,$n[1].Identifier],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_name","t":4,"rt":$n[2].String,"sn":"_name","ro":true}]}; }, $n);
    $m("Parser.TokenStream", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].IEnumerable$1(Tokenizer.Token)],"pi":[{"n":"tokens","pt":$n[0].IEnumerable$1(Tokenizer.Token),"ps":0}],"sn":"ctor"},{"a":2,"n":"Consume","t":8,"sn":"Consume","rt":$n[3].Token},{"a":2,"n":"Consume","t":8,"pi":[{"n":"expectedTokenType","pt":$n[3].TokenType,"ps":0}],"sn":"Consume$1","rt":$n[3].Token,"p":[$n[3].TokenType]},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[2].Void},{"a":2,"n":"Match","t":8,"pi":[{"n":"expectedTokenType","pt":$n[3].TokenType,"ps":0}],"sn":"Match","rt":$n[2].Boolean,"p":[$n[3].TokenType],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Peek","t":8,"sn":"Peek","rt":$n[3].Token},{"a":1,"n":"_isEnumeratorAhead","t":4,"rt":$n[2].Boolean,"sn":"_isEnumeratorAhead","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_tokenEnumerator","t":4,"rt":$n[0].IEnumerator$1(Tokenizer.Token),"sn":"_tokenEnumerator","ro":true}]}; }, $n);
});
