Bridge.assembly("Tokenizer", function ($asm, globals) {
    "use strict";


    var $m = Bridge.setMetadata,
        $n = ["Tokenizer","System","System.Collections.Generic","System.IO","System.Text"];
    $m("Tokenizer.Tokenize", function () { return {"nested":[$n[0].Tokenize.TokenEnumerableFromString],"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"FromString","is":true,"t":8,"pi":[{"n":"content","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[2].IEnumerable$1(Tokenizer.Token),"p":[$n[1].String]}]}; }, $n);
    $m("Tokenizer.Tokenize.TokenEnumerableFromString", function () { return {"td":$n[0].Tokenize,"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"content","pt":$n[1].String,"ps":0}],"sn":"ctor"},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[2].IEnumerator$1(Tokenizer.Token)},{"a":1,"n":"alreadyIterated","t":4,"rt":$n[1].Boolean,"sn":"alreadyIterated","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"content","t":4,"rt":$n[1].String,"sn":"content","ro":true}]}; }, $n);
    $m("Tokenizer.Token", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].TokenType,$n[1].String,$n[1].Int32,$n[0].ErrorCode],"pi":[{"n":"tokenType","pt":$n[0].TokenType,"ps":0},{"n":"content","pt":$n[1].String,"ps":1},{"n":"position","pt":$n[1].Int32,"ps":2},{"n":"errorCode","pt":$n[0].ErrorCode,"ps":3}],"sn":"ctor"},{"a":2,"n":"Content","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_Content","t":8,"rt":$n[1].String,"fg":"Content"},"fn":"Content"},{"a":2,"n":"ErrorCode","t":16,"rt":$n[0].ErrorCode,"g":{"a":2,"n":"get_ErrorCode","t":8,"rt":$n[0].ErrorCode,"fg":"ErrorCode","box":function ($v) { return Bridge.box($v, Tokenizer.ErrorCode, System.Enum.toStringFn(Tokenizer.ErrorCode));}},"fn":"ErrorCode"},{"a":2,"n":"Position","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Position","t":8,"rt":$n[1].Int32,"fg":"Position","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Position"},{"a":2,"n":"TokenType","t":16,"rt":$n[0].TokenType,"g":{"a":2,"n":"get_TokenType","t":8,"rt":$n[0].TokenType,"fg":"TokenType","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},"fn":"TokenType"}]}; }, $n);
    $m("Tokenizer.TextReaderTokenizer", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[3].TextReader],"pi":[{"n":"textReader","pt":$n[3].TextReader,"ps":0}],"sn":"ctor"},{"a":1,"n":"Consume","t":8,"sn":"Consume","rt":$n[1].Void},{"a":1,"n":"CreateToken","t":8,"pi":[{"n":"tokenType","pt":$n[0].TokenType,"ps":0},{"n":"errorCode","dv":0,"o":true,"pt":$n[0].ErrorCode,"ps":1}],"sn":"CreateToken","rt":$n[0].Token,"p":[$n[0].TokenType,$n[0].ErrorCode]},{"a":1,"n":"PeekIsDigit","t":8,"sn":"PeekIsDigit","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"PeekIsEOF","t":8,"sn":"PeekIsEOF","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"PeekIsLetter","t":8,"sn":"PeekIsLetter","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"PeekIsPunctuation","t":8,"sn":"PeekIsPunctuation","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"PeekIsWhiteSpace","t":8,"sn":"PeekIsWhiteSpace","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"PeekIsWordSeparator","t":8,"sn":"PeekIsWordSeparator","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Scan","t":8,"sn":"Scan","rt":$n[2].IEnumerable$1(Tokenizer.Token)},{"a":1,"n":"ScanDecimal","t":8,"sn":"ScanDecimal","rt":$n[0].Token},{"a":1,"n":"ScanIdentifier","t":8,"sn":"ScanIdentifier","rt":$n[0].Token},{"a":1,"n":"ScanInteger","t":8,"sn":"ScanInteger","rt":$n[0].Token},{"a":1,"n":"ScanPunctuation","t":8,"sn":"ScanPunctuation","rt":$n[0].Token},{"a":1,"n":"ScanWhiteSpace","t":8,"sn":"ScanWhiteSpace","rt":$n[0].Token},{"a":1,"n":"ScanWord","t":8,"pi":[{"n":"errorCode","pt":$n[0].ErrorCode,"ps":0}],"sn":"ScanWord","rt":$n[0].Token,"p":[$n[0].ErrorCode]},{"a":1,"n":"index","t":4,"rt":$n[1].Int32,"sn":"index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"peek","t":4,"rt":$n[1].Int32,"sn":"peek","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"textReader","t":4,"rt":$n[3].TextReader,"sn":"textReader","ro":true},{"a":1,"n":"tokenContentBuilder","t":4,"rt":$n[4].StringBuilder,"sn":"tokenContentBuilder","ro":true}]}; }, $n);
    $m("Tokenizer.TokenType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"AndDouble","is":true,"t":4,"rt":$n[0].TokenType,"sn":"AndDouble","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"AndSingle","is":true,"t":4,"rt":$n[0].TokenType,"sn":"AndSingle","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Assignment","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Assignment","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"BracketLeft","is":true,"t":4,"rt":$n[0].TokenType,"sn":"BracketLeft","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"BracketRight","is":true,"t":4,"rt":$n[0].TokenType,"sn":"BracketRight","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Colon","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Colon","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Comma","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Comma","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"CurlyLeft","is":true,"t":4,"rt":$n[0].TokenType,"sn":"CurlyLeft","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"CurlyRight","is":true,"t":4,"rt":$n[0].TokenType,"sn":"CurlyRight","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Decimal","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Decimal","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Dot","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Dot","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"EndOfFile","is":true,"t":4,"rt":$n[0].TokenType,"sn":"EndOfFile","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Equal","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Equal","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Exclamation","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Exclamation","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Greater","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Greater","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"GreaterOrEqual","is":true,"t":4,"rt":$n[0].TokenType,"sn":"GreaterOrEqual","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Identifier","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Identifier","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Integer","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Integer","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"LeftParenthesis","is":true,"t":4,"rt":$n[0].TokenType,"sn":"LeftParenthesis","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Less","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Less","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"LessOrEqual","is":true,"t":4,"rt":$n[0].TokenType,"sn":"LessOrEqual","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Minus","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Minus","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"NotEqual","is":true,"t":4,"rt":$n[0].TokenType,"sn":"NotEqual","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Percent","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Percent","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"PipeDouble","is":true,"t":4,"rt":$n[0].TokenType,"sn":"PipeDouble","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"PipeSingle","is":true,"t":4,"rt":$n[0].TokenType,"sn":"PipeSingle","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Plus","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Plus","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Pow","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Pow","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"QuestionMark","is":true,"t":4,"rt":$n[0].TokenType,"sn":"QuestionMark","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"RightParenthesis","is":true,"t":4,"rt":$n[0].TokenType,"sn":"RightParenthesis","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Semicolon","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Semicolon","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Slash","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Slash","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Star","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Star","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Tilde","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Tilde","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"Unknown","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Unknown","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}},{"a":2,"n":"WhiteSpace","is":true,"t":4,"rt":$n[0].TokenType,"sn":"WhiteSpace","box":function ($v) { return Bridge.box($v, Tokenizer.TokenType, System.Enum.toStringFn(Tokenizer.TokenType));}}]}; }, $n);
    $m("Tokenizer.ErrorCode", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ExpectedDecimal","is":true,"t":4,"rt":$n[0].ErrorCode,"sn":"ExpectedDecimal","box":function ($v) { return Bridge.box($v, Tokenizer.ErrorCode, System.Enum.toStringFn(Tokenizer.ErrorCode));}},{"a":2,"n":"NotAllowedIdentifierCharacters","is":true,"t":4,"rt":$n[0].ErrorCode,"sn":"NotAllowedIdentifierCharacters","box":function ($v) { return Bridge.box($v, Tokenizer.ErrorCode, System.Enum.toStringFn(Tokenizer.ErrorCode));}},{"a":2,"n":"Ok","is":true,"t":4,"rt":$n[0].ErrorCode,"sn":"Ok","box":function ($v) { return Bridge.box($v, Tokenizer.ErrorCode, System.Enum.toStringFn(Tokenizer.ErrorCode));}},{"a":2,"n":"Unknown","is":true,"t":4,"rt":$n[0].ErrorCode,"sn":"Unknown","box":function ($v) { return Bridge.box($v, Tokenizer.ErrorCode, System.Enum.toStringFn(Tokenizer.ErrorCode));}}]}; }, $n);
});
